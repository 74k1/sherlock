use gtk4::prelude::*;
use std::collections::HashSet;

use crate::actions::{execute_from_attrs, get_attrs_map};
use crate::g_subclasses::sherlock_row::SherlockRow;
use crate::launcher::Launcher;
use crate::loader::util::AppData;

use super::util::TileBuilder;
use super::Tile;

impl Tile {
    pub fn app_tile(
        launcher: &Launcher,
        keyword: &str,
        commands: &HashSet<AppData>,
    ) -> Vec<SherlockRow> {
        commands
            .into_iter()
            .map(|value| {
                let builder = TileBuilder::new("/dev/skxxtz/sherlock/ui/tile.ui");



                // Icon stuff
                builder.icon.and_then(|tmp| tmp.upgrade()).map(|icon| {
                    if value.icon.starts_with("/") {
                        icon.set_from_file(Some(&value.icon));
                    } else {
                        icon.set_icon_name(Some(&value.icon));
                    }
                    value.icon_class.as_ref().map(|c| icon.add_css_class(c));
                });


                let row_weak = builder.object.downgrade();
                let update_closure = {
                    // Construct attrs and enable action capabilities
                    let row = row_weak.clone();
                    let category_label = builder.category.clone();
                    let title_label = builder.title.clone();
                    let launcher = launcher.clone();
                    let attrs = get_attrs_map(
                        vec![
                            ("method", &launcher.method),
                            ("exec", &value.exec)
                        ]);
                    move |keyword: &str| -> bool {
                        let mut attrs = attrs.clone();
                        attrs.insert(String::from("keyword"), keyword.to_string());

                        let tile_name = value.name.replace("{keyword}", keyword);
                        builder.display_tag_start(&value.tag_start, keyword);
                        builder.display_tag_end(&value.tag_end, keyword);

                        title_label
                            .clone()
                            .and_then(|tmp| tmp.upgrade())
                            .map(|title| title.set_markup(&tile_name));

                        category_label.clone().and_then(|tmp| tmp.upgrade()).map(|cat| {
                            if let Some(name) = &launcher.name {
                                cat.set_text(name);
                            } else {
                                cat.set_visible(false);
                            }
                        });

                        row.upgrade().map(|row| {
                            let signal_id =
                                row.connect_local("row-should-activate", false, move |row| {
                                    let row =
                                        row.first().map(|f| f.get::<SherlockRow>().ok())??;
                                    execute_from_attrs(&row, &attrs);
                                    None
                                });
                            row.set_signal_id(signal_id);
                        });
                        false
                    }
                };

                builder.object.set_update(update_closure);
                builder.object.set_search(&value.search_string);
                builder.object.with_launcher(launcher);
                builder.object.set_priority(value.priority);
                if launcher.shortcut {
                    builder.object.set_shortcut_holder(builder.shortcut_holder);
                }
                builder.object
            })
            .collect()
    }
}
